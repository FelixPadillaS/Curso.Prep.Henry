Objetos
Un objeto es una colección de propiedades, y una propiedad es una asociación entre un nombre (o clave) y un 
valor. El valor de una propiedad puede ser una función, en cuyo caso la propiedad es conocida como un método. 
Además de los objetos que están predefinidos en el navegador, puedes definir tus propios objetos. Este 
capítulo describe cómo usar objetos, propiedades, funciones y métodos; y cómo crear tus propios objectos.
Visión general sobre Objetos

Los objetos en JavaScript, como en tantos otros lenguajes de programación, se pueden comparar con objetos de 
la vida real. El concepto de Objetos en JavaScript se puede entender con objetos tangibles de la vida real.

En JavaScript, un objeto es un entidad independiente con propiedades y tipos. Compáralo con una taza, por 
ejemplo. Una taza es un objeto con propiedades. Una taza tiene un color, un diseño, un peso, un material 
del que está hecha, etc. Del mismo modo, los objetos de JavaScript pueden tener propiedades que definan 
sus características.

Propiedades
Una propiedad de un objeto se puede explicar como una variable adjunta al objeto. Las propiedades de un objeto 
básicamente son lo mismo que las variables comunes de JavaScript, excepto por el nexo con el objeto. Las 
propiedades de un objeto definen las características del objeto.

Métodos
Las cosas que pueden hacer los objetos se llaman métodos.Los gatos ronronean, las computadoras se rompen y 
las bicicletas ruedan.
Los objetos de JavaScript también tienen métodos: click() para los botones, open() para las ventanas y el 
texto puede seleccionarse gracias al método selected(). Los paréntesis indican que estamos refiriéndonos a 
un método, y no a una propiedad.

Consejo
Puede ser útil pensar en los objetos y en las propiedades como nombres, y en los métodos como verbos. Los 
primeros son cosas, y los segundos, acciones que esas cosas pueden hacer, o que se les pueden hacer a ellas.

Bucle for…in
La instrucción for-in itera sobre todas las propiedades enumerables de un objeto que está codificado por 
cadenas (ignorando los codificados por Símbolos, incluidas las propiedades enumerables heredadas.


Notación de puntos vs notación de corchetes
Cuando usamos corchetes podemos acceder a propiedades que tienen un espacio o carácter no permitido en la 
notación de punto (por ejemplo, miMascota.numero de amigos no es válido, pero miMascota["numero de amigos"] 
sí lo es).
Si queremos minificar nuestro código, la notación del punto no es válida... debemos usar la notación de 
corchetes.
Así que es mejor usar los corchetes aunque parezca más complicado.